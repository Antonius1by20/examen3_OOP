# 1 Реализовать Рекурсию. Возведение числа x в степень y
#ИЛИ
#Определить функцию, которая будет дублировать нули в списке и вернуть в виде итеррируемого объекта-коллекции.
#Input:                         Output:
# func([0,0,0])            --> [0,0,0,0,0,0]
# func([1,2,100,0,3,4,5,0])--> [1,2,100,0,0,3,4,5,0,0]
def power(x, y):
    if (y == 1):
        return (x)
    if (y != 1):
        return (x * power(x, y - 1))
x = int(input("Введите число: "))
y = int(input("Введите его степень: "))
print("Результат возведения в степень равен:", power(x, y))


# 2 Определить функцию, которая проверяет является ли строка, введенная пользователем, целым числом.
# Решение задачи сдать ссылкой на GitHub.
def power(z,):
    return(z)
z = int(input("Введите число: "))
if type(z) == int:
    print('эта строка - Целое число')
else:
    print('Эта строка не является целым числом')


#ИЛИ
#Даны две строки. Определить функцию, которая будет находить индекс второго вхождения второй строки в первую.
# Если подстрока ' ' вывести None. Решение сдать ссылкой на GitHub.
#Input:                                 Output:
# func('marry', 'r')            --> 3
# func('merry christmas', 's')  --> 14
# func('happy new year', ' ')   --> None



# 3 Создайте класс IceCream (для заказа мороженого
# с добавкой или без),
# принимающий 1 аргумент при инициализации
# (отвечающий за добавку к мороженому).
# В этом классе реализуйте метод info_about_icecream(),
# выводящий на печать «Мороженное и {ДОБАВКА}»
# в случае наличия добавки, а иначе отобразится
# следующая фраза: «Обычное мороженое».
class IceCream:
    def __init__(self, dobavka):
        if isinstance(dobavka, str):
            self.dobavka = dobavka
        else:
            self.dobavka = None
    def info_about_IceCream(self):
        if self.dobavka:
            print(f"Мороженное и {self.ДОБАВКА}")
        else:
            print('Обычное мороженное')



# 4 Инкапсуляция. Определить класс Car,
# который будет содержать конструктор,
# в котором будет инициализироваться private
# переменная maxprice,
# а также методы изменения и вывода максимальной
# стоимости машины.
class Car:

    def __init__(self, __maxprice):
        self.__maxprice == __maxprice


# 5 Создать класс Animal и определить в нем метод
# make_a_sound(). Метод должен вывоводить строку
# "Издает звук"
# Cоздать классы Cat и Dog с методами scratch()
# и dig() соответственно.
# Метод scratch должен выводить строку "Царапать мебель".
# Метод dig должен выводить строку "Рыть землю".
# в классах Cat и Dog переопределите метод
# make_a_sound() базового класса Animal.
# (Cat: make_a_sound() -> '<...>', Dog: make_a_sound() -> '<...>')
class Animal:
    def make_a_sound(self):
        print("Издаёт звук")
class Cat(Animal):
    def scratch(self):
        print('Царапать мебель!')

    def make_a_sound(self):
        print('Мяу-мяу!')

class Dog(Animal):
    def dig(self):
        print('Рыть землю')

    def make_a_sound(self):
        print('Гав-гав!')






